#!/usr/bin/env ruby

require 'sometimes'

require 'shellwords'

require 'optparse'

options = {}
program_name = File.basename __FILE__
$program_name = program_name

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{program_name} [OPTIONS]"
  opts.separator ""

  opts.separator "Sometimes definition"
  opts.on("-c", "--config FILE", 'file path to the (YAML) sometimes definition file.') do |c|
    if !File.exist? c
      STDERR.puts "Cannot load conf file #{c}"
      exit 2
    end

    options[:conf_file] = c
  end

  opts.separator ""
  opts.separator "General"
  opts.on("-v", "--verbose", 'do log verbose output') do |v|
    options[:verbose] = v
  end

  opts.on_tail('--version', 'Show version.') do
    puts "#{program_name} #{Sometimes::VERSION}"
    exit 0
  end
  opts.on('-h', '--help', 'Show this help.') do
    puts opts
    exit 0
  end
end
optparse.parse!

if options[:verbose]
  Sometimes.logger.level = Logger::DEBUG
else
  Sometimes.logger.level = Logger::INFO
end

# TODO check if tools are present
# TODO logging

definition = Sometimes::read_def options[:conf_file]
key_path = File.expand_path definition.key

shescape = lambda {|v| Shellwords.escape v}
command = "ssh-keygen -q -N '' -C '%s' -f %s" % [definition.comment,
                                                 key_path].map(&shescape)

# Create the key-pair
Sometimes::Shell.execute(command)
if $?.exitstatus != 0
  STDERR.puts "Key creation failed!"
  exit 1
end

# Create authorized_keys file entry
what_path = File.expand_path definition.what
pub_key   = File.read(key_path + ".pub")
authorized_keys = Sometimes::AuthorizedKeysFile.line definition

# TODO sanity check, result check
File.open(key_path + ".authorized_keys.command", 'w') {|f| f.write(authorized_keys) }

# Explicit, graceful exit
exit 0
